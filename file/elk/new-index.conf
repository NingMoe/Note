input {
  tcp {
    port => 8000
    type => business
    host => "172.16.15.19"
  }

  tcp {
    port => 8010
    type => nginx_log
    host => "172.16.15.19"
  }

  tcp {
    port => 8020
    type => php_err
    host => "172.16.15.19"
  }

  tcp {
    port => 8030
    type => php_slow
    host => "172.16.15.19"
  }

  tcp {
    port => 8040
    type => ali_cdn
    host => "172.16.15.19"
    codec => plain{ charset => "CP936" }
  }

  tcp {
    port => 8050
    type => command
  }

  tcp {
    port => 8060
    type => renyun
    host => "172.16.15.19"
  }

  tcp{
    port => 8070
    type => wangsu_cdn
    host => "172.16.15.19"
    codec => plain{ charset => "CP936" }
  }

  tcp{
    port => 8080
    type => inter_flow
    host => "172.16.15.19"
  }

  tcp{
    port => 8090
    type => bilog
    host => "172.16.15.19"
    codec => "json"
  }

  tcp{
    port => 8100
    type => huosusdklog
    host => "172.16.15.19"
  }

   beats {
    host => "120.25.167.206"
    port => 8110
    }
}

filter {
  if [type] == "business"{
    ruby {
      init => "@kname = ['hostname','log_name','log_timestamp','log_level','event']"
      code => "new_event = LogStash::Event.new(Hash[@kname.zip(event['message'].split('#'))]); new_event.remove('@timestamp');event.append(new_event)"
      remove_field => ["message","@version","host"]
    }
    date {
      match => ["log_timestamp" , "ISO8601"]
    }
  }

  if [type] == "nginx_log"{
    grok { 
      match => { "message" => "(?:%{NOTSPACE:remote_addr}|-) - (?:%{USER:user}|-) \[%{HTTPDATE:log_timestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:status} (?:%{NUMBER:body_bytes_sent}|-) %{QS:referrer}%{QS:agent} (?:%{IP3:http_x_forwarded_for}|%{IP2:http_x_forwarded_for}|%{IP:http_x_forwarded_for}|-) %{NOTSPACE:http_head} %{NOTSPACE:hostname} %{NOTSPACE:upstream_response_time} %{NUMBER:request_time} %{NOTSPACE:post_part}" }

      match => { "message" => "(?:%{NOTSPACE:remote_addr}|-) - (?:%{USER:user}|-) \[%{HTTPDATE:log_timestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:status} (?:%{NUMBER:body_bytes_sent}|-) %{QS:referrer}%{QS:agent} (?:%{IP3:http_x_forwarded_for}|%{IP2:http_x_forwarded_for}|%{IP:http_x_forwarded_for}|-) %{NOTSPACE:http_head} %{NOTSPACE:hostname} %{NOTSPACE:upstream_response_time} %{NUMBER:request_time}" }
    }
    if [request] {
    ruby {
      init => "@kname = ['uri','url_args']"
      code => "new_event = LogStash::Event.new(Hash[@kname.zip(event['request'].split('?'))]); new_event.remove('@timestamp');event.append(new_event)"
      remove_field => ["request","message","@version","host","user"]
        }
    }
    date { match => ["log_timestamp" , "dd/MMM/yyyy:HH:mm:ss Z"] }
    mutate {
      convert => [
      "status" , "integer",
      "body_bytes_sent" , "integer",
      "request_time", "float",
      "upstream_response_time", "float"
      ]
    }
    date {
      match => ["timestamp" , "ISO8601"]
    }
    mutate {  gsub => [ "post_part", "password=[^&]+", "password=@@@@@@@" ] }
  }

  if [type] == "php_slow" {
    ruby {
      init => "@kname = ['hostname','log_name','log_timestamp','sub_process','process_id','event']"
      code => "new_event = LogStash::Event.new(Hash[@kname.zip(event['message'].split('#'))]); new_event.remove('@timestamp');event.append(new_event)"
      remove_field => ["message","@version","host"]
    }
    date {
      match => ["log_timestamp" , "dd-MMM-yyyy HH:mm:SS"]
    }
  }

  if [type] == "php_err" {
    ruby { 
      init => "@kname = ['hostname','log_name','log_timestamp','event']"
      code => "new_event = LogStash::Event.new(Hash[@kname.zip(event['message'].split('#'))]); new_event.remove('@timestamp');event.append(new_event)"
      remove_field => ["message","@version","host"]
    }
    date {
      match => ["log_timestamp" , "dd-MMM-yyyy HH:mm:SS"]
    }
  }

  if [type] == "ali_cdn" {
    grok {
      match => {"message" => "\[%{HTTPDATE:log_timestamp}\] %{IPV4:access_ip} (?:%{IP2:proxy_ip}|%{IP:proxy_ip}|-) %{NUMBER:responsetime} %{QS:referrer} \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:status} (?:%{NUMBER:requestsize}|-) (?:%{NUMBER:responsesize}|-) %{USER:cache_status} %{QS:agent} \"%{GREEDYDATA:filetype}\" %{NOTSPACE:filename}"}
      remove_field => ["message","host","@version"]
    }
    date {
      match => ["log_timestamp" , "dd/MMM/yyyy:HH:mm:ss Z"]
    }
    mutate {
      convert => [
      "status" , "integer",
      "requestsize" , "integer",
      "responsesize", "integer",
      "responsetime", "float"
      ]
    }
  }

  if [type] == "wangsu_cdn" {
    grok {
      match => { "message" => "%{COMBINEDAPACHELOG} %{NUMBER:body_size} \"(?:%{NUMBER:request_size}|-)\" \"(?:%{NOTSPACE:request_qujian}|-)\" %{NOTSPACE:filename}" }
      remove_field => ["message","@version","host"]
    }
    date {  
      match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]  
    }
    mutate {
      convert => [
      "response" , "integer",
      "bytes" , "integer",
      "body_size" , "integer",
      "request_size" , "integer"
      ]
    }
  }

  if [type] == "command" {
    grok {
      match => {"message" => "%{GREEDYDATA:xx}: : %{TIMESTAMP_ISO8601:log_timestamp} %{NOTSPACE:hostname} %{USERNAME:user}@%{NOTSPACE:tty} %{IPV4:chient_ip} %{NUMBER:client_port} %{IPV4:server_ip} %{NUMBER:server_port} %{GREEDYDATA:command}"}
      remove_field => ['message','port','host','@version','xx','tags']
    }
    grok {
      match => {"message" => "%{GREEDYDATA:xx}: : %{TIMESTAMP_ISO8601:log_timestamp} %{NOTSPACE:hostname} %{USERNAME:user}@\s+%{GREEDYDATA:command}"}
      remove_field => ['message','port','host','@version','xx','tags']
    }
    date { match => ["log_timestamp" , "yyyy-MM-dd HH:mm:ss"] }
  }

  if [type] == "renyun"{
    ruby {
      init => "@kname = ['hostname','file_path','msg']"
      code => "new_event = LogStash::Event.new(Hash[@kname.zip(event['message'].split('#'))]); new_event.remove('@timestamp');event.append(new_event)"
      remove_field => ["port","message","@version","host"]
    }
  }

  if [type] == "inter_flow" {
    grok {
      match => { "message" => "%{NOTSPACE:hostname} %{TIMESTAMP_ISO8601:log_timestamp} %{IP:eth0_ip} %{NUMBER:eth0_in} %{NUMBER:eth0_out} %{IP:eth1_ip} %{NUMBER:eth1_in} %{NUMBER:eth1_out}" }
      remove_field => ["message","@version","host"]
  }
    mutate {
      convert => [
      "eth0_in" , "integer",
      "eth0_out" , "integer",
      "eth1_in", "integer",
      "eth1_out", "integer"
      ]
    }
    date {  
      match => [ "log_timestamp" , "yyyy-MM-dd HH:mm:ss" ]
    }
  }

  if [type] == "bilog" {
    date { match => ["[content][operatime]" , "yyyy-MM-dd HH:mm:ss"] }
    mutate {  remove_field => ["message","@version","host"] }
  }

  if [type] == "huosusdklog" {
    ruby {
      init => "@kname = ['hostname','log_name','log_timestamp','remote_addr1','remote_addr2','verb','uri','event']"
      code => "new_event = LogStash::Event.new(Hash[@kname.zip(event['message'].split('#'))]); new_event.remove('@timestamp');event.append(new_event)"
      remove_field => ["message","@version","host","tags"]
    }
    date {
      match => ["log_timestamp" , "yyyy-MM-dd'T'HH:mm:ss+08:00"]
    }
  }

  if [fields][tag] == "xtag" or [fields][tag] == "isign"{
    grok {      
      match => {"message" => "%{TIMESTAMP_ISO8601:log_timestamp} %{GREEDYDATA:event}"
    }
      remove_field => ["port","message","@version","host","beat.hostname","input_type","hostname","tags","count"]
    }
      date { 
      match => [ "log_timestamp" , "yyyy-MM-dd HH:mm:ss.SSS" ]
    }
  }

}

output {
  if [type] == "nginx_log" {
  elasticsearch {
    hosts => "172.16.15.19:9200"
    index => "logstash-nginx-%{+YYYY-MM-dd}"
    user => 'elastic'
    password => 'changeme'
  }
  }

  if [type] == "business" {
  elasticsearch {
    hosts => "172.16.15.19:9200"
    index => "logstash-business-%{+YYYY-MM-dd}"
    user => 'elastic'
    password => 'changeme'
  }
  }

  if [type] == "ali_cdn" or [type] == "wangsu_cdn" {
  elasticsearch {
    hosts => "172.16.15.19:9200"
    index => "logstash-cdn-%{+YYYY-MM-dd}"
    user => 'elastic'
    password => 'changeme'
  }
  }

  if [type] == "command" {
  elasticsearch {
    hosts => "172.16.15.19:9200"
    index => "logstash-command-%{+YYYY-MM-dd}"
    user => 'elastic'
    password => 'changeme'
  }
  }

  if [type] == "renyun" {
  elasticsearch {
    hosts => "172.16.15.19:9200"
    index => "logstash-renyun-%{+YYYY-MM-dd}"
    user => 'elastic'
    password => 'changeme'
  }
  }

  if "php" in [type] {
  elasticsearch {
    hosts => "172.16.15.19:9200"
    index => "logstash-php-%{+YYYY-MM-dd}"
    user => 'elastic'
    password => 'changeme'
  }
  }

  if [type] == "inter_flow" {
  elasticsearch {
    hosts => "172.16.15.19:9200"
    index => "logstash-inter-flow-%{+YYYY-MM-dd}"
    user => 'elastic'
    password => 'changeme'
  }
  }

  if [type] == "bilog" {
  elasticsearch {
    hosts => "172.16.15.19:9200"
    index => "logstash-bilog-%{+YYYY-MM-dd}"
    user => 'elastic'
    password => 'changeme'
  }
  }

  if [type] == "huosusdklog" {
  elasticsearch {
    hosts => "172.16.15.19:9200"
    index => "logstash-huosusdklog-%{+YYYY-MM-dd}"
    user => 'elastic'
    password => 'changeme'
  }
  }

  if [fields][tag] == "isign" {
  elasticsearch {
    hosts => "172.16.15.19:9200"
    index => "logstash-applelog-%{+YYYY-MM-dd}"
    user => 'elastic'
    password => 'changeme'
  }
  }

  if [fields][tag] == "xtag" {
  elasticsearch {
    hosts => "172.16.15.19:9200"
    index => "logstash-apple-xtaglog-%{+YYYY-MM-dd}"
    user => 'elastic'
    password => 'changeme'
  }
  }
}
